// ========================================
// Prisma Schema - ฟิสิกส์พี่เต้ย Learning System
// ========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// 1. User Management Models
// ========================================

enum UserRole {
  admin
  teacher
  student
}

enum Gender {
  male
  female
  other
}

model User {
  id              String    @id @default(uuid()) @db.Uuid
  email           String    @unique @db.VarChar(255)
  passwordHash    String?   @map("password_hash") @db.VarChar(255)
  firstName       String    @map("first_name") @db.VarChar(100)
  lastName        String    @map("last_name") @db.VarChar(100)
  phone           String?   @db.VarChar(20)
  profileImage    String?   @map("profile_image") @db.Text
  dateOfBirth     DateTime? @map("date_of_birth") @db.Date
  gender          Gender?
  role            UserRole  @default(student)
  isActive        Boolean   @default(true) @map("is_active")
  emailVerified   Boolean   @default(false) @map("email_verified")
  lastLogin       DateTime? @map("last_login") @db.Timestamptz
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  socialLogins        UserSocialLogin[]
  courses             Course[]              @relation("CourseTeacher")
  articles            Article[]             @relation("ArticleAuthor")
  announcements       Announcement[]        @relation("AnnouncementAuthor")
  orders              Order[]
  courseEnrollments   CourseEnrollment[]
  lessonProgress      LessonProgress[]
  courseReviews       CourseReview[]
  reviewReplies       ReviewReply[]
  notifications       Notification[]
  userSessions        UserSession[]
  activityLogs        ActivityLog[]
  promotionUsage      PromotionUsage[]
  fileUploads         FileUpload[]
  paymentReceiptReviews PaymentReceipt[]   @relation("PaymentReceiptReviewer")
  certificates        Certificate[]
  quizAttempts        QuizAttempt[]
  discussions         Discussion[]          @relation("UserDiscussions")
  discussionReplies   DiscussionReply[]     @relation("UserDiscussionReplies")
  wishlist            Wishlist[]

  @@map("users")
}

enum SocialProvider {
  line
  google
}

model UserSocialLogin {
  id           String         @id @default(uuid()) @db.Uuid
  userId       String         @map("user_id") @db.Uuid
  provider     SocialProvider
  providerId   String         @map("provider_id") @db.VarChar(255)
  providerData Json?          @map("provider_data") @db.JsonB
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("user_social_logins")
}

// ========================================
// 2. Content Management Models
// ========================================

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?   @db.Text
  parentId    String?   @map("parent_id") @db.Uuid
  sortOrder   Int       @default(0) @map("sort_order")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryParent")
  subjects Subject[]
  articles Article[]

  @@map("categories")
}

model Subject {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?  @db.Text
  categoryId  String?  @map("category_id") @db.Uuid
  color       String?  @db.VarChar(7) // Hex color code
  icon        String?  @db.VarChar(50)
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  courses  Course[]
  examSets ExamSet[]

  @@map("subjects")
}

// ========================================
// 3. Course Management Models
// ========================================

enum CourseLevel {
  beginner
  intermediate
  advanced
}

model Course {
  id               String      @id @default(uuid()) @db.Uuid
  title            String      @db.VarChar(200)
  slug             String      @unique @db.VarChar(200)
  description      String?     @db.Text
  shortDescription String?     @map("short_description") @db.VarChar(500)
  thumbnailImage   String?     @map("thumbnail_image") @db.Text
  coverImage       String?     @map("cover_image") @db.Text
  subjectId        String?     @map("subject_id") @db.Uuid
  teacherId        String?     @map("teacher_id") @db.Uuid
  level            CourseLevel?
  price            Decimal     @default(0) @db.Decimal(10, 2)
  originalPrice    Decimal?    @map("original_price") @db.Decimal(10, 2)
  durationHours    Int?        @map("duration_hours")
  totalLessons     Int         @default(0) @map("total_lessons")
  requirements     String?     @db.Text
  whatYouLearn     String?     @map("what_you_learn") @db.Text
  isPublished      Boolean     @default(false) @map("is_published")
  isFeatured       Boolean     @default(false) @map("is_featured")
  sortOrder        Int         @default(0) @map("sort_order")
  createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  subject           Subject?            @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  teacher           User?               @relation("CourseTeacher", fields: [teacherId], references: [id], onDelete: SetNull)
  chapters          CourseChapter[]
  enrollments       CourseEnrollment[]
  reviews           CourseReview[]
  orderItems        OrderItem[]
  prerequisites     CoursePrerequisite[] @relation("CoursePrerequisites")
  prerequisiteFor   CoursePrerequisite[] @relation("PrerequisiteFor")
  learningPaths     LearningPathCourse[] @relation("LearningPathCourses")
  certificates      Certificate[]        @relation("CourseCertificates")
  discussions       Discussion[]
  wishlist          Wishlist[]           @relation("CourseWishlist")
  tags              CourseTagRelation[]

  @@map("courses")
}

model CourseChapter {
  id          String   @id @default(uuid()) @db.Uuid
  courseId    String   @map("course_id") @db.Uuid
  title       String   @db.VarChar(200)
  description String?  @db.Text
  sortOrder   Int      @default(0) @map("sort_order")
  isPublished Boolean  @default(false) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  course  Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons CourseLesson[]

  @@map("course_chapters")
}

enum LessonContentType {
  video
  document
  quiz
  assignment
}

model CourseLesson {
  id              String            @id @default(uuid()) @db.Uuid
  chapterId       String            @map("chapter_id") @db.Uuid
  title           String            @db.VarChar(200)
  contentType     LessonContentType @map("content_type")
  contentUrl      String?           @map("content_url") @db.Text
  contentData     Json?             @map("content_data") @db.JsonB
  description     String?           @db.Text
  durationMinutes Int?              @map("duration_minutes")
  sortOrder       Int               @default(0) @map("sort_order")
  isPublished     Boolean           @default(false) @map("is_published")
  isFree          Boolean           @default(false) @map("is_free")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  chapter        CourseChapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]
  quizzes        Quiz[]
  discussions    Discussion[]     @relation("LessonDiscussions")

  @@map("course_lessons")
}

// ========================================
// 4. Exam Repository Models
// ========================================

model ExamType {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?  @db.Text
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  examSets ExamSet[]

  @@map("exam_types")
}

enum DifficultyLevel {
  easy
  medium
  hard
}

model ExamSet {
  id                String          @id @default(uuid()) @db.Uuid
  title             String          @db.VarChar(200)
  examTypeId        String?         @map("exam_type_id") @db.Uuid
  subjectId         String?         @map("subject_id") @db.Uuid
  examYear          Int?            @map("exam_year")
  setNumber         String?         @map("set_number") @db.VarChar(50)
  examMonth         String?         @map("exam_month") @db.VarChar(20)
  fileUrl           String?         @map("file_url") @db.Text
  answerKeyUrl      String?         @map("answer_key_url") @db.Text
  explanationUrl    String?         @map("explanation_url") @db.Text
  totalQuestions    Int?            @map("total_questions")
  timeLimitMinutes  Int?            @map("time_limit_minutes")
  difficultyLevel   DifficultyLevel? @map("difficulty_level")
  downloadCount     Int             @default(0) @map("download_count")
  isPublished       Boolean         @default(false) @map("is_published")
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  examType ExamType? @relation(fields: [examTypeId], references: [id], onDelete: SetNull)
  subject  Subject?  @relation(fields: [subjectId], references: [id], onDelete: SetNull)

  @@map("exam_sets")
}

// ========================================
// 5. Article System Models
// ========================================

enum ArticleStatus {
  draft
  published
  archived
}

model Article {
  id            String        @id @default(uuid()) @db.Uuid
  title         String        @db.VarChar(200)
  slug          String        @unique @db.VarChar(200)
  content       String?       @db.Text
  excerpt       String?       @db.VarChar(500)
  featuredImage String?       @map("featured_image") @db.Text
  authorId      String?       @map("author_id") @db.Uuid
  categoryId    String?       @map("category_id") @db.Uuid
  status        ArticleStatus @default(draft)
  isFeatured    Boolean       @default(false) @map("is_featured")
  viewCount     Int           @default(0) @map("view_count")
  publishedAt   DateTime?     @map("published_at") @db.Timestamptz
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  author   User?      @relation("ArticleAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags     ArticleTagRelation[]

  @@map("articles")
}

model ArticleTag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(50)
  slug      String   @unique @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  articles ArticleTagRelation[]

  @@map("article_tags")
}

model ArticleTagRelation {
  articleId String @map("article_id") @db.Uuid
  tagId     String @map("tag_id") @db.Uuid

  // Relations
  article Article    @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     ArticleTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tag_relations")
}

// ========================================
// 6. Announcement System Models
// ========================================

model AnnouncementType {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?  @db.Text
  color       String?  @db.VarChar(7) // Hex color code
  icon        String?  @db.VarChar(50)
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  announcements Announcement[]

  @@map("announcement_types")
}

enum AnnouncementPriority {
  low
  normal
  high
  urgent
}

enum TargetAudience {
  all
  students
  teachers
}

model Announcement {
  id             String                @id @default(uuid()) @db.Uuid
  title          String                @db.VarChar(200)
  content        String?               @db.Text
  typeId         String?               @map("type_id") @db.Uuid
  authorId       String?               @map("author_id") @db.Uuid
  priority       AnnouncementPriority  @default(normal)
  isPinned       Boolean               @default(false) @map("is_pinned")
  attachmentUrl  String?               @map("attachment_url") @db.Text
  targetAudience TargetAudience        @default(all) @map("target_audience")
  startDate      DateTime              @default(now()) @map("start_date") @db.Timestamptz
  endDate        DateTime?             @map("end_date") @db.Timestamptz
  isPublished    Boolean               @default(false) @map("is_published")
  viewCount      Int                   @default(0) @map("view_count")
  createdAt      DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime              @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  type   AnnouncementType? @relation(fields: [typeId], references: [id], onDelete: SetNull)
  author User?             @relation("AnnouncementAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  @@map("announcements")
}

// ========================================
// 7. Promotion System Models
// ========================================

enum DiscountType {
  percentage
  fixed_amount
}

model Promotion {
  id              String       @id @default(uuid()) @db.Uuid
  title           String       @db.VarChar(200)
  description     String?      @db.Text
  code            String?      @unique @db.VarChar(50)
  discountType    DiscountType @map("discount_type")
  discountValue   Decimal      @map("discount_value") @db.Decimal(10, 2)
  minimumPurchase Decimal      @default(0) @map("minimum_purchase") @db.Decimal(10, 2)
  maximumDiscount Decimal?     @map("maximum_discount") @db.Decimal(10, 2)
  usageLimit      Int?         @map("usage_limit")
  usedCount       Int          @default(0) @map("used_count")
  startDate       DateTime?    @map("start_date") @db.Timestamptz
  endDate         DateTime?    @map("end_date") @db.Timestamptz
  isActive        Boolean      @default(true) @map("is_active")
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  orders Order[]
  usage  PromotionUsage[]

  @@map("promotions")
}

model PromotionUsage {
  id          String   @id @default(uuid()) @db.Uuid
  promotionId String   @map("promotion_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  orderId     String?  @map("order_id") @db.Uuid
  usedAt      DateTime @default(now()) @map("used_at") @db.Timestamptz

  // Relations
  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Order?    @relation(fields: [orderId], references: [id])

  @@map("promotion_usage")
}

// ========================================
// 8. Order & Payment System Models
// ========================================

enum OrderStatus {
  pending
  processing
  paid
  expired
  cancelled
  refunded
  partially_refunded
}

model Order {
  id                   String    @id @default(uuid()) @db.Uuid
  userId               String    @map("user_id") @db.Uuid
  orderNumber          String    @unique @map("order_number") @db.VarChar(50)
  totalAmount          Decimal   @map("total_amount") @db.Decimal(10, 2)
  discountAmount       Decimal   @default(0) @map("discount_amount") @db.Decimal(10, 2)
  finalAmount          Decimal   @map("final_amount") @db.Decimal(10, 2)
  promotionId          String?   @map("promotion_id") @db.Uuid
  status               OrderStatus @default(pending)
  paymentMethod        String    @default("manual_transfer") @map("payment_method") @db.VarChar(20)
  paymentDetails       Json?     @map("payment_details") @db.JsonB
  notes                String?   @db.Text
  expiresAt            DateTime? @map("expires_at") @db.Timestamptz
  processingStartedAt  DateTime? @map("processing_started_at") @db.Timestamptz
  completedAt          DateTime? @map("completed_at") @db.Timestamptz
  cancelledAt          DateTime? @map("cancelled_at") @db.Timestamptz
  cancelledReason      String?   @map("cancelled_reason") @db.Text
  adminNotes           String?   @map("admin_notes") @db.Text
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  promotion      Promotion?       @relation(fields: [promotionId], references: [id], onDelete: SetNull)
  items          OrderItem[]
  paymentReceipt PaymentReceipt[]
  promotionUsage PromotionUsage[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @map("order_id") @db.Uuid
  courseId  String   @map("course_id") @db.Uuid
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum PaymentReceiptStatus {
  pending
  approved
  rejected
}

model PaymentReceipt {
  id             String               @id @default(uuid()) @db.Uuid
  orderId        String               @map("order_id") @db.Uuid
  receiptImage   String               @map("receipt_image") @db.Text
  bankName       String?              @map("bank_name") @db.VarChar(100)
  transferDate   DateTime?            @map("transfer_date") @db.Date
  transferAmount Decimal?             @map("transfer_amount") @db.Decimal(10, 2)
  transferTime   DateTime?            @map("transfer_time") @db.Time
  notes          String?              @db.Text
  status         PaymentReceiptStatus @default(pending)
  reviewedBy     String?              @map("reviewed_by") @db.Uuid
  reviewedAt     DateTime?            @map("reviewed_at") @db.Timestamptz
  reviewNotes    String?              @map("review_notes") @db.Text
  createdAt      DateTime             @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  reviewer User? @relation("PaymentReceiptReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@map("payment_receipts")
}

// ========================================
// 9. Student Progress Models
// ========================================

model CourseEnrollment {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @map("user_id") @db.Uuid
  courseId          String    @map("course_id") @db.Uuid
  enrolledAt        DateTime  @default(now()) @map("enrolled_at") @db.Timestamptz
  completedAt       DateTime? @map("completed_at") @db.Timestamptz
  progressPercentage Decimal  @default(0) @map("progress_percentage") @db.Decimal(5, 2)
  totalWatchTime    Int       @default(0) @map("total_watch_time")
  lastAccessedAt    DateTime? @map("last_accessed_at") @db.Timestamptz
  isActive          Boolean   @default(true) @map("is_active")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model LessonProgress {
  id                   String    @id @default(uuid()) @db.Uuid
  userId               String    @map("user_id") @db.Uuid
  lessonId             String    @map("lesson_id") @db.Uuid
  isCompleted          Boolean   @default(false) @map("is_completed")
  watchTime            Int       @default(0) @map("watch_time")
  completionPercentage Decimal   @default(0) @map("completion_percentage") @db.Decimal(5, 2)
  completedAt          DateTime? @map("completed_at") @db.Timestamptz
  lastAccessedAt       DateTime? @map("last_accessed_at") @db.Timestamptz
  notes                String?   @db.Text
  bookmarks            Json?     @db.JsonB

  // Relations
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson CourseLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

// ========================================
// 10. Review System Models
// ========================================

model CourseReview {
  id                  String    @id @default(uuid()) @db.Uuid
  courseId            String    @map("course_id") @db.Uuid
  userId              String    @map("user_id") @db.Uuid
  rating              Int       @db.SmallInt
  title               String?   @db.VarChar(200)
  content             String?   @db.Text
  isVerifiedPurchase  Boolean   @default(false) @map("is_verified_purchase")
  isPublished         Boolean   @default(true) @map("is_published")
  helpfulCount        Int       @default(0) @map("helpful_count")
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  course  Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies ReviewReply[]

  @@unique([courseId, userId])
  @@map("course_reviews")
}

model ReviewReply {
  id          String   @id @default(uuid()) @db.Uuid
  reviewId    String   @map("review_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  content     String   @db.Text
  isPublished Boolean  @default(true) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  review CourseReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("review_replies")
}

// ========================================
// 11. Notification System Models
// ========================================

model NotificationTemplate {
  id              String   @id @default(uuid()) @db.Uuid
  name            String   @db.VarChar(100)
  type            String   @db.VarChar(50)
  titleTemplate   String?  @map("title_template") @db.Text
  contentTemplate String?  @map("content_template") @db.Text
  channels        Json     @db.JsonB
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("notification_templates")
}

model Notification {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  title     String    @db.VarChar(200)
  content   String?   @db.Text
  type      String?   @db.VarChar(50)
  data      Json?     @db.JsonB
  channels  Json?     @db.JsonB
  isRead    Boolean   @default(false) @map("is_read")
  sentAt    DateTime  @default(now()) @map("sent_at") @db.Timestamptz
  readAt    DateTime? @map("read_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ========================================
// 12. System Configuration Models
// ========================================

enum SettingType {
  string
  number
  boolean
  json
}

model Setting {
  id          String      @id @default(uuid()) @db.Uuid
  key         String      @unique @db.VarChar(100)
  value       String?     @db.Text
  type        SettingType @default(string)
  description String?     @db.Text
  isPublic    Boolean     @default(false) @map("is_public")
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  @@map("settings")
}

model FileUpload {
  id           String   @id @default(uuid()) @db.Uuid
  originalName String   @map("original_name") @db.VarChar(255)
  fileName     String   @map("file_name") @db.VarChar(255)
  filePath     String   @map("file_path") @db.Text
  fileUrl      String   @map("file_url") @db.Text
  mimeType     String?  @map("mime_type") @db.VarChar(100)
  fileSize     Int?     @map("file_size")
  uploadedBy   String?  @map("uploaded_by") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  uploader User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)

  @@map("file_uploads")
}

// ========================================
// 13. Analytics Models
// ========================================

model UserSession {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  sessionToken String    @unique @map("session_token") @db.VarChar(255)
  ipAddress    String?   @map("ip_address") @db.Inet
  userAgent    String?   @map("user_agent") @db.Text
  startedAt    DateTime  @default(now()) @map("started_at") @db.Timestamptz
  endedAt      DateTime? @map("ended_at") @db.Timestamptz
  isActive     Boolean   @default(true) @map("is_active")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model ActivityLog {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String?   @map("user_id") @db.Uuid
  action     String    @db.VarChar(100)
  tableName  String?   @map("table_name") @db.VarChar(50)
  recordId   String?   @map("record_id") @db.Uuid
  oldData    Json?     @map("old_data") @db.JsonB
  newData    Json?     @map("new_data") @db.JsonB
  ipAddress  String?   @map("ip_address") @db.Inet
  userAgent  String?   @map("user_agent") @db.Text
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

// ========================================
// 14. Additional Models for Enhanced Features
// ========================================

// Course Prerequisites
model CoursePrerequisite {
  id                   String  @id @default(uuid()) @db.Uuid
  courseId             String  @map("course_id") @db.Uuid
  prerequisiteCourseId String  @map("prerequisite_course_id") @db.Uuid
  isRequired           Boolean @default(true) @map("is_required")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  course             Course @relation("CoursePrerequisites", fields: [courseId], references: [id], onDelete: Cascade)
  prerequisiteCourse Course @relation("PrerequisiteFor", fields: [prerequisiteCourseId], references: [id], onDelete: Cascade)

  @@unique([courseId, prerequisiteCourseId])
  @@map("course_prerequisites")
}

// Learning Paths
model LearningPath {
  id                     String            @id @default(uuid()) @db.Uuid
  name                   String            @db.VarChar(200)
  description            String?           @db.Text
  totalCourses           Int               @default(0) @map("total_courses")
  estimatedDurationHours Int?              @map("estimated_duration_hours")
  difficultyLevel        DifficultyLevel?  @map("difficulty_level")
  isPublished            Boolean           @default(false) @map("is_published")
  createdAt              DateTime          @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  courses LearningPathCourse[]

  @@map("learning_paths")
}

model LearningPathCourse {
  id             String   @id @default(uuid()) @db.Uuid
  learningPathId String   @map("learning_path_id") @db.Uuid
  courseId       String   @map("course_id") @db.Uuid
  sortOrder      Int      @default(0) @map("sort_order")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course       Course       @relation("LearningPathCourses", fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([learningPathId, courseId])
  @@map("learning_path_courses")
}

// Certificates
model Certificate {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  courseId          String   @map("course_id") @db.Uuid
  certificateNumber String   @unique @map("certificate_number") @db.VarChar(50)
  issuedDate        DateTime @default(now()) @map("issued_date") @db.Timestamptz
  certificateUrl    String?  @map("certificate_url") @db.Text
  isValid           Boolean  @default(true) @map("is_valid")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation("CourseCertificates", fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("certificates")
}

// Quiz System
model Quiz {
  id          String   @id @default(uuid()) @db.Uuid
  lessonId    String   @map("lesson_id") @db.Uuid
  title       String   @db.VarChar(200)
  description String?  @db.Text
  timeLimit   Int?     @map("time_limit") // in minutes
  maxAttempts Int?     @map("max_attempts")
  passingScore Int     @default(70) @map("passing_score")
  isPublished Boolean  @default(false) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  lesson    CourseLesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]

  @@map("quizzes")
}

enum QuestionType {
  multiple_choice
  true_false
  short_answer
  essay
}

model QuizQuestion {
  id           String       @id @default(uuid()) @db.Uuid
  quizId       String       @map("quiz_id") @db.Uuid
  question     String       @db.Text
  questionType QuestionType @map("question_type")
  options      Json?        @db.JsonB // For multiple choice options
  correctAnswer String?     @map("correct_answer") @db.Text
  points       Int          @default(1)
  sortOrder    Int          @default(0) @map("sort_order")
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  quiz    Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers QuizAttemptAnswer[]

  @@map("quiz_questions")
}

model QuizAttempt {
  id          String    @id @default(uuid()) @db.Uuid
  quizId      String    @map("quiz_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  startedAt   DateTime  @default(now()) @map("started_at") @db.Timestamptz
  completedAt DateTime? @map("completed_at") @db.Timestamptz
  score       Int?      // percentage score
  isPassed    Boolean?  @map("is_passed")
  timeSpent   Int?      @map("time_spent") // in minutes
  
  // Relations
  quiz    Quiz                @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers QuizAttemptAnswer[]

  @@map("quiz_attempts")
}

model QuizAttemptAnswer {
  id           String   @id @default(uuid()) @db.Uuid
  attemptId    String   @map("attempt_id") @db.Uuid
  questionId   String   @map("question_id") @db.Uuid
  userAnswer   String?  @map("user_answer") @db.Text
  isCorrect    Boolean? @map("is_correct")
  pointsEarned Int      @default(0) @map("points_earned")

  // Relations
  attempt  QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@map("quiz_attempt_answers")
}

// Discussion Forum
model Discussion {
  id          String   @id @default(uuid()) @db.Uuid
  courseId    String   @map("course_id") @db.Uuid
  lessonId    String?  @map("lesson_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  title       String   @db.VarChar(200)
  content     String   @db.Text
  isSticky    Boolean  @default(false) @map("is_sticky")
  isClosed    Boolean  @default(false) @map("is_closed")
  viewCount   Int      @default(0) @map("view_count")
  replyCount  Int      @default(0) @map("reply_count")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  course  Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson  CourseLesson?     @relation("LessonDiscussions", fields: [lessonId], references: [id], onDelete: Cascade)
  user    User              @relation("UserDiscussions", fields: [userId], references: [id], onDelete: Cascade)
  replies DiscussionReply[]

  @@map("discussions")
}

model DiscussionReply {
  id           String    @id @default(uuid()) @db.Uuid
  discussionId String    @map("discussion_id") @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  content      String    @db.Text
  parentId     String?   @map("parent_id") @db.Uuid // For nested replies
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user       User       @relation("UserDiscussionReplies", fields: [userId], references: [id], onDelete: Cascade)
  parent     DiscussionReply? @relation("ReplyParent", fields: [parentId], references: [id], onDelete: Cascade)
  replies    DiscussionReply[] @relation("ReplyParent")

  @@map("discussion_replies")
}

// Wishlist
model Wishlist {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  courseId  String   @map("course_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation("CourseWishlist", fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("wishlist")
}

// Course Tags
model CourseTag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(50)
  slug      String   @unique @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  courses CourseTagRelation[]

  @@map("course_tags")
}

model CourseTagRelation {
  courseId String @map("course_id") @db.Uuid
  tagId    String @map("tag_id") @db.Uuid

  // Relations
  course Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tag    CourseTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([courseId, tagId])
  @@map("course_tag_relations")
}

// ========================================
// Update existing models to add missing relations
// ========================================