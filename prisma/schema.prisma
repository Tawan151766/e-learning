generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String?
  password     String?
  role         Role          @default(STUDENT)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  courses      Course[]      @relation("InstructorCourses")
  enrollments  Enrollment[]
  orders       Order[]
  posts        Post[]        @relation("AuthorPosts")
  ebookReviews EbookReview[]
}

model Course {
  id           String       @id @default(uuid())
  title        String
  description  String?
  price        Float        @default(0)
  duration     Int?
  isFree       Boolean      @default(false)
  status       CourseStatus @default(DRAFT)
  instructorId String
  categoryId   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  chapters     Chapter[]
  category     Category?    @relation(fields: [categoryId], references: [id])
  instructor   User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  orders       Order[]
}

model Chapter {
  id        String    @id @default(uuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime  @default(now())
  course    Course    @relation(fields: [courseId], references: [id])
  contents  Content[]
}

model Content {
  id          String      @id @default(uuid())
  title       String
  contentType ContentType
  contentUrl  String
  order       Int
  chapterId   String
  createdAt   DateTime    @default(now())
  chapter     Chapter     @relation(fields: [chapterId], references: [id])
}

model Enrollment {
  id         String       @id @default(uuid())
  userId     String
  courseId   String
  progress   Float        @default(0)
  status     EnrollStatus @default(ACTIVE)
  enrolledAt DateTime     @default(now())
  course     Course       @relation(fields: [courseId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  courses     Course[]
}

model Order {
  id           String    @id @default(uuid())
  userId       String
  courseId     String?
  ebookId      String?
  orderType    OrderType @default(COURSE)
  status       String
  total        Float
  shippingFee  Float     @default(0)
  createdAt    DateTime  @default(now())
  course       Course?   @relation(fields: [courseId], references: [id])
  ebook        Ebook?    @relation(fields: [ebookId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  payment      Payment?
  shipping     Shipping?
}

model Payment {
  id      String    @id @default(uuid())
  orderId String    @unique
  method  String
  status  String
  paidAt  DateTime?
  ref     String?
  order   Order     @relation(fields: [orderId], references: [id])
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum ContentType {
  VIDEO
  PDF
  LINK
  QUIZ
  ASSIGNMENT
}

enum EnrollStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

enum OrderType {
  COURSE
  EBOOK
}

enum EbookFormat {
  PDF
  EPUB
  MOBI
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model PostType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Post {
  id                  String    @id @default(uuid())
  title               String
  content             String?
  excerpt             String?
  imageUrl            String?
  imageUrlMobileMode  String?
  slug                String?   @unique
  isActive            Boolean   @default(true)
  isFeatured          Boolean   @default(false)
  publishedAt         DateTime?
  authorId            String
  postTypeId          String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  author              User      @relation("AuthorPosts", fields: [authorId], references: [id])
  postType            PostType  @relation(fields: [postTypeId], references: [id])
}





model Ebook {
  id              String        @id @default(uuid())
  title           String
  description     String?
  author          String
  isbn            String?       @unique
  price           Float
  discountPrice   Float?
  coverImageUrl   String?
  previewUrl      String?
  fileUrl         String?
  fileSize        Int?
  pageCount       Int?
  language        String        @default("th")
  format          EbookFormat   @default(PDF)
  isPhysical      Boolean       @default(false)
  weight          Float?
  dimensions      String?
  isActive        Boolean       @default(true)
  isFeatured      Boolean       @default(false)
  publishedAt     DateTime?
  categoryId      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  category        EbookCategory? @relation(fields: [categoryId], references: [id])
  orders          Order[]
  reviews         EbookReview[]
}

model EbookCategory {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ebooks      Ebook[]
}



model EbookReview {
  id        String   @id @default(uuid())
  ebookId   String
  userId    String
  rating    Int      @default(5)
  comment   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ebook     Ebook    @relation(fields: [ebookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([ebookId, userId])
}

model Shipping {
  id              String         @id @default(uuid())
  orderId         String         @unique
  recipientName   String
  recipientPhone  String
  address         String
  district        String
  province        String
  postalCode      String
  country         String         @default("Thailand")
  shippingMethod  String
  trackingNumber  String?
  status          ShippingStatus @default(PENDING)
  shippedAt       DateTime?
  deliveredAt     DateTime?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  order           Order          @relation(fields: [orderId], references: [id])
}

model ExamCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  exams       ExamBank[]
}

model ExamBank {
  id          String       @id @default(uuid())
  title       String
  description String?
  categoryId  String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    ExamCategory? @relation(fields: [categoryId], references: [id])
  files       ExamFile[]
}

model ExamFile {
  id         String   @id @default(uuid())
  examId     String
  fileName   String
  filePath   String
  fileType   String?
  fileSize   Int?
  uploadedAt DateTime @default(now())
  exam       ExamBank @relation(fields: [examId], references: [id], onDelete: Cascade)
}
