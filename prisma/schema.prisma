generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String?
  role        Role         @default(STUDENT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courses     Course[]     @relation("InstructorCourses")
  enrollments Enrollment[]
  orders      Order[]
}

model Course {
  id           String       @id @default(uuid())
  title        String
  description  String?
  price        Float        @default(0)
  duration     Int?
  isFree       Boolean      @default(false)
  status       CourseStatus @default(DRAFT)
  instructorId String
  categoryId   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  chapters     Chapter[]
  category     Category?    @relation(fields: [categoryId], references: [id])
  instructor   User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  orders       Order[]
}

model Chapter {
  id        String    @id @default(uuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime  @default(now())
  course    Course    @relation(fields: [courseId], references: [id])
  contents  Content[]
}

model Content {
  id          String      @id @default(uuid())
  title       String
  contentType ContentType
  contentUrl  String
  order       Int
  chapterId   String
  createdAt   DateTime    @default(now())
  chapter     Chapter     @relation(fields: [chapterId], references: [id])
}

model Enrollment {
  id         String       @id @default(uuid())
  userId     String
  courseId   String
  progress   Float        @default(0)
  status     EnrollStatus @default(ACTIVE)
  enrolledAt DateTime     @default(now())
  course     Course       @relation(fields: [courseId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  courses     Course[]
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  status    String
  total     Float
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  payment   Payment?
}

model Payment {
  id      String    @id @default(uuid())
  orderId String    @unique
  method  String
  status  String
  paidAt  DateTime?
  ref     String?
  order   Order     @relation(fields: [orderId], references: [id])
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum ContentType {
  VIDEO
  PDF
  LINK
  QUIZ
  ASSIGNMENT
}

enum EnrollStatus {
  ACTIVE
  COMPLETED
  CANCELED
}
