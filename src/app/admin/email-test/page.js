"use client";
import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Button, 
  Space, 
  Typography, 
  Alert, 
  Divider, 
  Tag,
  Descriptions,
  Spin,
  message,
  Row,
  Col
} from 'antd';
import {
  MailOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  ExperimentOutlined,
  SettingOutlined,
  InfoCircleOutlined
} from '@ant-design/icons';

const { Title, Text, Paragraph } = Typography;

export default function EmailTestPage() {
  const [loading, setLoading] = useState(false);
  const [config, setConfig] = useState(null);
  const [results, setResults] = useState([]);

  useEffect(() => {
    checkEmailConfig();
  }, []);

  const checkEmailConfig = async () => {
    try {
      const response = await fetch('/api/test/email');
      const data = await response.json();
      setConfig(data);
    } catch (error) {
      console.error('Error checking email config:', error);
      message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
    }
  };

  const testEmail = async (type, orderIdSuffix = '') => {
    setLoading(true);
    const orderId = `test-${type}-${Date.now()}${orderIdSuffix}`;
    
    try {
      const response = await fetch('/api/test/email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ type, orderId }),
      });

      const data = await response.json();
      
      const result = {
        type,
        timestamp: new Date(),
        success: data.success,
        message: data.message || data.error,
        messageId: data.messageId,
        details: data.details
      };

      setResults(prev => [result, ...prev]);

      if (data.success) {
        message.success(`‡∏™‡πà‡∏á email ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${type} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } else {
        message.error(`‡∏™‡πà‡∏á email ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${type} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.error}`);
      }
    } catch (error) {
      const result = {
        type,
        timestamp: new Date(),
        success: false,
        message: error.message,
        details: error.toString()
      };
      
      setResults(prev => [result, ...prev]);
      message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const getStatusIcon = (success) => {
    return success ? 
      <CheckCircleOutlined style={{ color: '#52c41a' }} /> : 
      <CloseCircleOutlined style={{ color: '#ff4d4f' }} />;
  };

  const getTypeText = (type) => {
    const types = {
      'success': '‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      'failure': '‚ùå ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      'custom': 'üß™ Email ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
    };
    return types[type] || type;
  };

  return (
    <div style={{ padding: '24px', maxWidth: '1200px', margin: '0 auto' }}>
      <Title level={2}>
        <MailOutlined /> ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Email Notification
      </Title>
      
      <Paragraph>
        ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      </Paragraph>

      <Row gutter={[24, 24]}>
        <Col xs={24} lg={12}>
          {/* ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Email */}
          <Card 
            title={
              <span>
                <SettingOutlined /> ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Email
              </span>
            }
            extra={
              <Button 
                size="small" 
                onClick={checkEmailConfig}
                icon={<InfoCircleOutlined />}
              >
                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
              </Button>
            }
          >
            {config ? (
              <>
                <Alert
                  message={
                    config.configured 
                      ? "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Email ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" 
                      : "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Email ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"
                  }
                  type={config.configured ? "success" : "warning"}
                  showIcon
                  style={{ marginBottom: 16 }}
                />
                
                <Descriptions column={1} size="small" bordered>
                  <Descriptions.Item label="Email User">
                    {config.config.hasEmailUser ? (
                      <Tag color="green">
                        <CheckCircleOutlined /> {config.config.emailUser}
                      </Tag>
                    ) : (
                      <Tag color="red">
                        <CloseCircleOutlined /> ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                      </Tag>
                    )}
                  </Descriptions.Item>
                  
                  <Descriptions.Item label="Email Password">
                    {config.config.hasEmailPassword ? (
                      <Tag color="green">
                        <CheckCircleOutlined /> ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
                      </Tag>
                    ) : (
                      <Tag color="red">
                        <CloseCircleOutlined /> ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                      </Tag>
                    )}
                  </Descriptions.Item>
                  
                  <Descriptions.Item label="Admin Email">
                    {config.config.hasAdminEmail ? (
                      <Tag color="green">
                        <CheckCircleOutlined /> {config.config.adminEmail}
                      </Tag>
                    ) : (
                      <Tag color="red">
                        <CloseCircleOutlined /> ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                      </Tag>
                    )}
                  </Descriptions.Item>
                </Descriptions>

                {!config.configured && (
                  <Alert
                    message="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"
                    description={
                      <div>
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variables ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env.local:
                        <ul style={{ marginTop: 8, marginBottom: 0 }}>
                          {!config.config.hasEmailUser && <li>EMAIL_USER</li>}
                          {!config.config.hasEmailPassword && <li>EMAIL_PASSWORD</li>}
                          {!config.config.hasAdminEmail && <li>ADMIN_EMAIL</li>}
                        </ul>
                      </div>
                    }
                    type="warning"
                    showIcon
                    style={{ marginTop: 16 }}
                  />
                )}
              </>
            ) : (
              <Spin />
            )}
          </Card>

          {/* ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Email */}
          <Card 
            title={
              <span>
                <ExperimentOutlined /> ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email
              </span>
            }
            style={{ marginTop: 24 }}
          >
            <Space direction="vertical" size="middle" style={{ width: '100%' }}>
              <div>
                <Text strong>‡∏ó‡∏î‡∏™‡∏≠‡∏ö Email ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á ‡πÜ:</Text>
              </div>
              
              <Space wrap>
                <Button
                  type="primary"
                  icon={<CheckCircleOutlined />}
                  onClick={() => testEmail('success')}
                  loading={loading}
                  disabled={!config?.configured}
                >
                  ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                </Button>
                
                <Button
                  danger
                  icon={<CloseCircleOutlined />}
                  onClick={() => testEmail('failure')}
                  loading={loading}
                  disabled={!config?.configured}
                >
                  ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                </Button>
                
                <Button
                  icon={<MailOutlined />}
                  onClick={() => testEmail('custom')}
                  loading={loading}
                  disabled={!config?.configured}
                >
                  Email ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                </Button>
              </Space>

              {!config?.configured && (
                <Alert
                  message="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ"
                  description="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ email configuration ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô"
                  type="warning"
                  showIcon
                  size="small"
                />
              )}
            </Space>
          </Card>
        </Col>

        <Col xs={24} lg={12}>
          {/* ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö */}
          <Card 
            title={
              <span>
                <InfoCircleOutlined /> ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
              </span>
            }
            extra={
              results.length > 0 && (
                <Button 
                  size="small" 
                  onClick={() => setResults([])}
                >
                  ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                </Button>
              )
            }
          >
            {results.length === 0 ? (
              <Alert
                message="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
                description="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email"
                type="info"
                showIcon
              />
            ) : (
              <Space direction="vertical" size="small" style={{ width: '100%' }}>
                {results.map((result, index) => (
                  <Card
                    key={index}
                    size="small"
                    style={{
                      border: `1px solid ${result.success ? '#52c41a' : '#ff4d4f'}`,
                      borderRadius: 6
                    }}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                      {getStatusIcon(result.success)}
                      <Text strong>{getTypeText(result.type)}</Text>
                      <Tag size="small" color="default">
                        {result.timestamp.toLocaleTimeString('th-TH')}
                      </Tag>
                    </div>
                    
                    <div style={{ marginTop: 8 }}>
                      <Text 
                        type={result.success ? 'success' : 'danger'}
                        style={{ fontSize: '12px' }}
                      >
                        {result.message}
                      </Text>
                    </div>
                    
                    {result.messageId && (
                      <div style={{ marginTop: 4 }}>
                        <Text code style={{ fontSize: '11px' }}>
                          ID: {result.messageId}
                        </Text>
                      </div>
                    )}
                  </Card>
                ))}
              </Space>
            )}
          </Card>

          {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
          <Card 
            title="üìö ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
            style={{ marginTop: 24 }}
          >
            <Space direction="vertical" size="small">
              <div>
                <Text strong>1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</Text>
                <br />
                <Text type="secondary">
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ EMAIL_USER, EMAIL_PASSWORD ‡πÅ‡∏•‡∏∞ ADMIN_EMAIL ‡πÉ‡∏ô .env ‡πÅ‡∏•‡πâ‡∏ß
                </Text>
              </div>
              
              <Divider style={{ margin: '8px 0' }} />
              
              <div>
                <Text strong>2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email</Text>
                <br />
                <Text type="secondary">
                  ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á email ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• admin
                </Text>
              </div>
              
              <Divider style={{ margin: '8px 0' }} />
              
              <div>
                <Text strong>3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email</Text>
                <br />
                <Text type="secondary">
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á admin (‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Spam)
                </Text>
              </div>
            </Space>
          </Card>
        </Col>
      </Row>
    </div>
  );
}
