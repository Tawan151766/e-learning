/**
 * Email notification service
 * ‡∏™‡πà‡∏á email ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á admin ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */

import nodemailer from 'nodemailer';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á email transporter
const createTransporter = () => {
  // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Gmail ‡∏Å‡∏±‡∏ö App Password
  if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
    return nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô App Password
      },
    });
  }

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMTP Provider ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
  return nodemailer.createTransport({
    host: process.env.SMTP_HOST || 'smtp.gmail.com',
    port: parseInt(process.env.SMTP_PORT) || 587,
    secure: process.env.SMTP_SECURE === 'true', // true for 465, false for other ports
    auth: {
      user: process.env.SMTP_USER || process.env.EMAIL_USER,
      pass: process.env.SMTP_PASS || process.env.EMAIL_PASSWORD,
    },
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SSL
    tls: {
      rejectUnauthorized: false
    }
  });
};

/**
 * ‡∏™‡πà‡∏á email ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 * @param {Object} paymentData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
 * @param {Object} orderData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * @param {Object} userData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
export const sendPaymentSuccessNotification = async (paymentData, orderData, userData) => {
  try {
    if (!process.env.EMAIL_USER || !process.env.ADMIN_EMAIL) {
      console.log('‚ö†Ô∏è Email configuration not found, skipping email notification');
      return { success: false, error: 'Email configuration not found' };
    }

    const transporter = createTransporter();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ email
    const itemName = orderData.course?.title || orderData.ebook?.title || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const itemType = orderData.course ? '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' : 'E-book';

    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #28a745; color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }
          .content { background-color: #f8f9fa; padding: 20px; border: 1px solid #dee2e6; }
          .footer { background-color: #6c757d; color: white; padding: 15px; text-align: center; border-radius: 0 0 5px 5px; }
          .info-row { margin: 10px 0; padding: 5px 0; border-bottom: 1px solid #dee2e6; }
          .label { font-weight: bold; color: #495057; }
          .value { color: #212529; }
          .success { color: #28a745; font-weight: bold; }
          .amount { font-size: 18px; font-weight: bold; color: #28a745; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h2>üéâ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
            <p>‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
          </div>
          
          <div class="content">
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
            
            <div class="info-row">
              <span class="label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
              <span class="value success">‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</span>
              <span class="value">${orderData.id}</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</span>
              <span class="value">${itemName} (${itemType})</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</span>
              <span class="value amount">‡∏ø${paymentData.amount.toLocaleString()}</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</span>
              <span class="value">${getPaymentMethodText(paymentData.method)}</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</span>
              <span class="value">${userData.name} (${userData.email})</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞:</span>
              <span class="value">${new Date(paymentData.paidAt || paymentData.updatedAt).toLocaleString('th-TH')}</span>
            </div>
            
            ${paymentData.confidence ? `
            <div class="info-row">
              <span class="label">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô:</span>
              <span class="value">${paymentData.confidence}%</span>
            </div>
            ` : ''}
            
            ${paymentData.adminNotes ? `
            <div class="info-row">
              <span class="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</span>
              <span class="value">${paymentData.adminNotes}</span>
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <p>‡∏£‡∏∞‡∏ö‡∏ö E-Learning - ‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡∏û‡∏µ‡πà‡πÄ‡∏ï‡πâ‡∏¢</p>
            <p>‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á: ${new Date().toLocaleString('th-TH')}</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const mailOptions = {
      from: `"‡∏£‡∏∞‡∏ö‡∏ö E-Learning" <${process.env.EMAIL_USER}>`,
      to: process.env.ADMIN_EMAIL,
      subject: `‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ${itemName} (‡∏ø${paymentData.amount.toLocaleString()})`,
      html: htmlContent,
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Payment success email sent:', result.messageId);
    
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('‚ùå Error sending payment success email:', error);
    return { success: false, error: error.message };
  }
};

/**
 * ‡∏™‡πà‡∏á email ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 * @param {Object} paymentData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
 * @param {Object} orderData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * @param {Object} userData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {string} reason - ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
export const sendPaymentFailureNotification = async (paymentData, orderData, userData, reason = '') => {
  try {
    if (!process.env.EMAIL_USER || !process.env.ADMIN_EMAIL) {
      console.log('‚ö†Ô∏è Email configuration not found, skipping email notification');
      return { success: false, error: 'Email configuration not found' };
    }

    const transporter = createTransporter();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ email
    const itemName = orderData.course?.title || orderData.ebook?.title || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const itemType = orderData.course ? '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' : 'E-book';

    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #dc3545; color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }
          .content { background-color: #f8f9fa; padding: 20px; border: 1px solid #dee2e6; }
          .footer { background-color: #6c757d; color: white; padding: 15px; text-align: center; border-radius: 0 0 5px 5px; }
          .info-row { margin: 10px 0; padding: 5px 0; border-bottom: 1px solid #dee2e6; }
          .label { font-weight: bold; color: #495057; }
          .value { color: #212529; }
          .error { color: #dc3545; font-weight: bold; }
          .amount { font-size: 18px; font-weight: bold; color: #dc3545; }
          .reason { background-color: #f8d7da; padding: 10px; border-radius: 5px; border-left: 4px solid #dc3545; margin: 15px 0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h2>‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
            <p>‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
          </div>
          
          <div class="content">
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
            
            <div class="info-row">
              <span class="label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
              <span class="value error">‚ùå ${getPaymentStatusText(paymentData.status)}</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</span>
              <span class="value">${orderData.id}</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:</span>
              <span class="value">${itemName} (${itemType})</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</span>
              <span class="value amount">‡∏ø${paymentData.amount.toLocaleString()}</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</span>
              <span class="value">${getPaymentMethodText(paymentData.method)}</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</span>
              <span class="value">${userData.name} (${userData.email})</span>
            </div>
            
            <div class="info-row">
              <span class="label">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:</span>
              <span class="value">${new Date(paymentData.updatedAt).toLocaleString('th-TH')}</span>
            </div>
            
            ${paymentData.confidence ? `
            <div class="info-row">
              <span class="label">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô:</span>
              <span class="value">${paymentData.confidence}%</span>
            </div>
            ` : ''}
            
            ${reason && `
            <div class="reason">
              <strong>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</strong><br>
              ${reason}
            </div>
            `}
            
            ${paymentData.adminNotes ? `
            <div class="info-row">
              <span class="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</span>
              <span class="value">${paymentData.adminNotes}</span>
            </div>
            ` : ''}
          </div>
          
          <div class="footer">
            <p>‡∏£‡∏∞‡∏ö‡∏ö E-Learning - ‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡∏û‡∏µ‡πà‡πÄ‡∏ï‡πâ‡∏¢</p>
            <p>‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á: ${new Date().toLocaleString('th-TH')}</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const mailOptions = {
      from: `"‡∏£‡∏∞‡∏ö‡∏ö E-Learning" <${process.env.EMAIL_USER}>`,
      to: process.env.ADMIN_EMAIL,
      subject: `‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ${itemName} (‡∏ø${paymentData.amount.toLocaleString()})`,
      html: htmlContent,
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Payment failure email sent:', result.messageId);
    
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('‚ùå Error sending payment failure email:', error);
    return { success: false, error: error.message };
  }
};

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
 */
const getPaymentMethodText = (method) => {
  const methods = {
    'BANK_TRANSFER': '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
    'CREDIT_CARD': '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
    'DEBIT_CARD': '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏î‡∏ö‡∏¥‡∏ï',
    'MOBILE_BANKING': 'Mobile Banking',
    'PROMPT_PAY': 'PromptPay',
    'TRUE_WALLET': 'TrueMoney Wallet',
    'FREE': '‡∏ü‡∏£‡∏µ',
    'CASH': '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î'
  };
  return methods[method] || method;
};

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
 */
const getPaymentStatusText = (status) => {
  const statuses = {
    'PENDING': '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
    'PENDING_VERIFICATION': '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    'APPROVED': '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
    'COMPLETED': '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    'REJECTED': '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
    'FAILED': '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
    'CANCELLED': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
  };
  return statuses[status] || status;
};

/**
 * ‡∏™‡πà‡∏á email ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
 * @param {string} to - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
 * @param {string} subject - ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
 * @param {string} htmlContent - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ HTML
 */
export const sendEmailNotification = async (to, subject, htmlContent) => {
  try {
    if (!process.env.EMAIL_USER) {
      console.log('‚ö†Ô∏è Email configuration not found');
      return { success: false, error: 'Email configuration not found' };
    }

    const transporter = createTransporter();
    
    const mailOptions = {
      from: `"‡∏£‡∏∞‡∏ö‡∏ö E-Learning" <${process.env.EMAIL_USER}>`,
      to: to,
      subject: subject,
      html: htmlContent,
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Email sent:', result.messageId);
    
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('‚ùå Error sending email:', error);
    return { success: false, error: error.message };
  }
};
